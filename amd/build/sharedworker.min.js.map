{"version":3,"file":"sharedworker.min.js","sources":["../src/sharedworker.js"],"sourcesContent":["define(['local_webworkers/helper'], function(worker) {\n    return {\n        init: function() {\n            let portMap = [];\n\n            /**\n             * Generates a sequential set of numbers for the\n             * lifetime of the worker.\n             * @returns {Generator<number, void, *>}\n             */\n            function* generatePortNumber() {\n                const start = 0;\n                const end = Infinity;\n                const step = 1;\n                for (let i = start; i < end; i += step) {\n                    yield i;\n                }\n            }\n            let portNumber =  generatePortNumber();\n\n            self.addEventListener(\"connect\", (e) => {\n                let clientId = portNumber.next().value;\n                portMap[clientId] = e.ports[0];\n                e.ports[0].addEventListener(\"message\", handleClientMessage(clientId));\n                e.ports[0].start();\n            });\n\n            let handleMessage = (clientId, e) => {\n                portMap.forEach(function (port, portId) {\n                    if (clientId != portId) {\n                        port.postMessage({\n                            type: 'TextMessage',\n                            clientId: clientId,\n                            contentsString: e.data.contentsString,\n                        });\n                    } else {\n                        port.postMessage({\n                            type: 'Pong',\n                            clientId: clientId,\n                            contentsString: e.data.contentsString,\n                        });\n                    }\n                });\n            };\n\n            let handleClientMessage = (cliendId) => {\n                return (e) => {\n                    return handleMessage(cliendId, e);\n                };\n            };\n            worker.workerSetupComplete();\n        }\n    };\n});"],"names":["define","worker","init","portMap","portNumber","i","Infinity","generatePortNumber","self","addEventListener","e","clientId","next","value","ports","handleClientMessage","start","cliendId","forEach","port","portId","postMessage","type","contentsString","data","handleMessage","workerSetupComplete"],"mappings":"AAAAA,2CAAO,CAAC,4BAA4B,SAASC,cAClC,CACHC,KAAM,eACEC,QAAU,OAeVC,2BAJK,IAAIC,EAHK,EAGMA,EAFRC,SAEiBD,GADhB,QAEHA,EAGIE,GAElBC,KAAKC,iBAAiB,WAAYC,QAC1BC,SAAWP,WAAWQ,OAAOC,MACjCV,QAAQQ,UAAYD,EAAEI,MAAM,GAC5BJ,EAAEI,MAAM,GAAGL,iBAAiB,UAAWM,oBAAoBJ,WAC3DD,EAAEI,MAAM,GAAGE,eAqBXD,oBAAuBE,UACfP,GAnBQ,EAACC,SAAUD,KAC3BP,QAAQe,SAAQ,SAAUC,KAAMC,QACxBT,UAAYS,OACZD,KAAKE,YAAY,CACbC,KAAM,cACNX,SAAUA,SACVY,eAAgBb,EAAEc,KAAKD,iBAG3BJ,KAAKE,YAAY,CACbC,KAAM,OACNX,SAAUA,SACVY,eAAgBb,EAAEc,KAAKD,qBAQxBE,CAAcR,SAAUP,GAGvCT,OAAOyB"}